@using Microsoft.JSInterop
@inject IJSRuntime JS

<div class="map-container" id="@_elementId">
    <div id="" class="jvmap-smart">

        <div id="" class="map">
            <span>@AlternativeMapText</span>
        </div>

        <div id="" class="legend">
            <span>@AlternativeLegendText</span>
        </div>


    </div>
</div>


@code{

    [Parameter]
    public MapOptions MapOptions { get; set; } = new();

    [Parameter]
    public string AlternativeMapText { get; set; } = "Alternative Map Text";

    [Parameter]
    public EventCallback<string> OnAreaClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnPlotClicked { get; set; }

    [Parameter]
    public string AlternativeLegendText { get; set; } = "Alternative Legend Text";

    private string _elementId = "p" + Guid.NewGuid().ToString()[..6];


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var dotNetObjectReference = DotNetObjectReference.Create(this);
        if (firstRender)
        {
            if (MapOptions != null)
            {
                await JS.InvokeVoidAsync("createMap", _elementId, dotNetObjectReference, MapOptions);
            }
        }
    }

    [JSInvokable]
    public void PlotClickHandler(string key)
    {
        OnPlotClicked.InvokeAsync(key);
    }

    [JSInvokable]
    public void AreaClickHandler(string key)
    {
        OnAreaClicked.InvokeAsync(key);
    }

}