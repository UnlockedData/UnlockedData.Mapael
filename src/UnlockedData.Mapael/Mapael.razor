@using Microsoft.JSInterop
@using UnlockedData.Mapael.Models
@using System.Runtime.InteropServices
@inject IJSRuntime JS

    <div class="map-outer-container">
        <div class="map-container" id="@_elementId">
            <div id="" class="">
        
                <div id="" class="map">
                    <span>@AlternativeMapText</span>
                </div>
                
                @if (DisplayLegend)
                {
                    <div id="" class="legend">
                        <span>@AlternativeLegendText</span>
                    </div>            
                }
        
            </div>
        </div>
    </div>



@code{

    [Parameter]
    public MapOptions MapOptions { get; set; } = new();

    [Parameter]
    public string AlternativeMapText { get; set; } = "Alternative Map Text";

    [Parameter]
    public EventCallback<string> OnAreaClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnPlotClicked { get; set; }
    
    [Parameter]
    public EventCallback<string> OnLinkClicked { get; set; }

    [Parameter]
    public bool DisplayLegend { get; set; } = false;

    [Parameter]
    public string AlternativeLegendText { get; set; } = "Alternative Legend Text";

    [Parameter]
    public int AnimationUpdateDelay { get; set; }
    

    private string _elementId = "p" + Guid.NewGuid().ToString()[..6];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var dotNetObjectReference = DotNetObjectReference.Create(this);
        if (firstRender)
        {
            if (MapOptions != null)
            {
                await JS.InvokeVoidAsync("createMap", _elementId, dotNetObjectReference, MapOptions);
            }
            
            return;
        }
        await JS.InvokeVoidAsync("updateMap", _elementId, dotNetObjectReference, MapOptions, AnimationUpdateDelay);

    }

    [JSInvokable]
    public async Task PlotClickHandler(string key)
    {
        await OnPlotClicked.InvokeAsync(key);
    }

    [JSInvokable]
    public async Task AreaClickHandler(string key)
    {
        await OnAreaClicked.InvokeAsync(key);
    }
    
    [JSInvokable]
    public async Task LinkClickHandler(string key)
    {
        await OnLinkClicked.InvokeAsync(key);
    }

}